/// <reference types="loopback" />

// Type definitions for Loopback-boot

/* =================== USAGE ===================

    import * as boot from "loopback-boot";
    
    boot(app, __dirname, function (err) {
      if (err) {
        throw err;
      }

      app.start();
    });

 =============================================== */

export = loopback_boot;

declare function loopback_boot(app: loopback.Loopback, options: any, callback: (this: void, err: any) => void): void;

declare namespace loopback_boot {
    function addInstructionsToBrowserify(instructions: any, bundler: any): void;

    function compile(options: any): any;

    function compileToBrowserify(options: any, bundler: any): void;

    function execute(app: any, instructions: any, callback: any): any;

    namespace ConfigLoader {
        function loadAppConfig(rootDir: any, env: any): any;

        function loadComponents(rootDir: any, env: any): any;

        function loadDataSources(rootDir: any, env: any): any;

        function loadMiddleware(rootDir: any, env: any): any;

        function loadModels(rootDir: any, env: any): any;

    }

    namespace utils {
        function fileExistsSync(filepath: any): any;

    }

}
/** Declaration file generated by dts-gen */
